% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deprecate_argument.R
\name{deprecate_argument}
\alias{deprecate_argument}
\title{Deprecate argument}
\usage{
deprecate_argument(new_arg, old_arg, .frequency = "once")
}
\arguments{
\item{new_arg}{New argument, such as \code{x}}

\item{old_arg}{Old argument, such as \code{time_by}}

\item{.frequency}{String to pass to rlang::warn, set to \code{"always"} for
debugging and running tests, otherwise should always be \code{"once"} (default)}
}
\value{
Nothing, makes an assignment in the parent environment
}
\description{
Some functions had a clunky API with inconsistent nomenclature. This is a
helper function to deprecate some of the parameters in a consistent way
while allowing old scripts to work.
}
\details{
This function is designed to be used in \code{piecewise_interpolate_pulses} and
\code{average_pitchtracks}. Here is a list of the relevant deprecated parameters:
\itemize{
\item \code{time_by} -> \code{x}
\item \code{.pitchval} -> \code{y}
\item \code{index_column} -> \code{index_by}
\item \code{.grouping} -> \code{group}
\item \code{.sort} -> \code{sort_first}
}

This function will assign the new argument the value of the old argument
iff the new argument is missing and the old argument is provided a value.
A warning for each parameter is shown once per session.
This function will only execute if the parent environment is not the global
environmet; in other words, this function should not be called directly.
This is to avoid making assignments in the global environment or overwriting
data in the global environment.
}
\examples{
\dontrun{
foo <- function(x, y) {
deprecate_argument(x, y)

print(x)
}

foo(y=4) # Prints 4 and throws a warning
}
}
